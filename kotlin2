8.Kotlin扩展
伴生类Companion
companion object{ }
9.Kotlin数据类与密封类
数据类 data  解构赋值
密封类， 就是一种专门用来配合 when 语句使用的类，用来表示受限的类继承结构：
当一个值为有限几种的类型, 而不能有任何其他类型时。在某种意义上，他们是枚举类的扩展
声明一个密封类，使用 sealed 修饰类，密封类可以有子类，但是所有的子类都必须要内嵌在密封类中
sealed class Expr
data class Const(val number: Double) : Expr()
data class Sum(val e1: Expr, val e2: Expr) : Expr()
object NotANumber : Expr()
fun eval(expr: Expr): Double = when (expr) {
    is Const -> expr.number
    is Sum -> eval(expr.e1) + eval(expr.e2)
    NotANumber -> Double.NaN
}
___________
10.Kotlin泛型
泛型，即 "参数化类型"，将类型参数化，可以用在类，接口，方法上。
与 Java 一样，Kotlin 也提供泛型，为类型安全提供保证，消除类型强转的烦恼。
声明一个泛型类或接口:
class Box<T>(t: T) {
    var value = t
}
创建类的实例时我们需要指定类型参数:
val box: Box<Int> = Box<Int>(1)
// 或者
val box = Box(1) // 编译器会进行类型推断，1 类型 Int，所以编译器知道我们说的是 Box<Int>。
声明一个泛型方法
 fun <T> doPrintln(content: T) {
    when (content) {
        is Int -> println("整型数字为 $content")
        is String -> println("字符串转换为大写：${content.toUpperCase()}")
        else -> println("T 不是整型，也不是字符串")
    }
}
 fun main(){
    val age=23
   val name="lily"
   val bool=true
    doPrintln(age)
    doPrintln(name)
    doPrintln(bool)
    
 }
泛型约束

fun  <T:Number>sum (vararg param:T) = param.sumByDouble{it.toDouble()}
kotlin默认泛型约束上界是Any？，因为Any类似Object所有非空类型超类型，不包含null
T:Number表示上界为Number及其子类，如果是其他类型就报错

where关键字 指定多个约束上届
open class ClassA 
interface InterfaceB  
class  MyClass<T>(var variable:Class<T>) where T:ClassA,T:InterfaceB

声明处型变
out  
in

星号投射
不知道泛型实参的任何信息
其实就是*代指了所有类型，相当于Any? ，类似java中无界类型通配符？
--------------
11.Kotlin枚举类
枚举类最基本的用法是实现一个类型安全的枚举。
enum class Color{
    RED,BLACK,BLUE,GREEN,WHITE//枚举常量用逗号分隔,每个枚举常量都是一个对象
}
默认名称为枚举字符名，值从0开始。若需要指定值，则可以使用其构造函数：
enum class Shape(value:Int){
    ovel(100),
    rectangle(200)
}
枚举初始化
每一个枚举都是枚举类的实例，它们可以被初始化：
enum class Color(val rgb: Int) {
    RED(0xFF0000),
    GREEN(0x00FF00),
    BLUE(0x0000FF)
}

--------------
12. 对象表达，对象声明，伴生对象

对象表达式可以越过类的定义直接得到一个对象
val site = object  {
        var name: String = "菜鸟教程"
        var url: String = "www.runoob.com"
}
这个对象还可以继承于某个基类，或者实现其他接口
open class A(x: Int) {
    public open val y: Int = x
}
interface B {……}
val ab: A = object : A(1), B {
    override val y = 15
}

对象表达式实现一个匿名内部类的对象用于方法的参数中：
在对象表达中可以方便的访问到作用域中的其他变量和方法:
 var clickCount = 0
var enterCount = 0

window.addMouseListener(object : MouseAdapter() {
    override fun mouseClicked(e: MouseEvent) {
        clickCount++
    }
    override fun mouseEntered(e: MouseEvent) {
        enterCount++
    }
})

对象声明
Kotlin 中我们可以方便的通过对象声明来获得一个单例
object DataProviderManager {
   fun registerDataProvider(provider: DataProvider) {
        // ……
    }
}
引用该对象，我们直接使用其名称即可：
DataProviderManager.registerDataProvider(……)

当时当你定义两个不同的变量来获取这个对象时，你会发现你并不能得到两个不同的变量。
也就是说通过这种方式，我们获得一个单例
var data1 = DataProviderManager
var data2 = DataProviderManager
data1.name = "test"
print("data1 name = ${data2.name}")  

与对象表达式不同，当对象声明在另一个类的内部时，
这个对象并不能通过外部类的实例访问到该对象，而只能通过类名来访问，
同样该对象也不能直接访问到外部类的方法和变量

class Site {
    var name = "kotlin"
    object DeskTop{
        var url = "www.baidu.com"
        fun showName(){
            print{"desk legs $name"} // 错误，不能访问到外部类的方法和变量
        }
    }
}
fun main(args: Array<String>) {
    var site = Site()
    site.DeskTop.url // 错误，不能通过外部类的实例访问到该对象
    Site.DeskTop.url // 正确，通过外部类名.类名访问
}

伴生对象
一个类里面只能声明一个内部关联对象，即关键字 companion 只能使用一次
类内部的对象声明可以用 companion 关键字标记，这样它就与外部类关联在一起，
我们就可以直接通过外部类访问到对象的内部元素。
class MyClass {
    companion object Factory {
        fun create(): MyClass = MyClass()
    }
}
val instance = MyClass.create()   // 外部类，直接访问到对象的内部
省略掉该对象的对象名，然后使用 Companion 替代需要声明的对象名
class MyClass {
    companion object {
          fun create(): MyClass = MyClass()
    }
}
val x = MyClass.create()

伴生对象的扩展
通过"类名."形式调用伴生对象，伴生对象声明的扩展函数，通过用类名限定符来调用
class MyClass {
    companion object { }  // 将被称为 "Companion"
}

fun MyClass.Companion.foo() {
    println("伴随对象的扩展函数")
}

val MyClass.Companion.no: Int
    get() = 10

fun main(args: Array<String>) {
    println("no:${MyClass.no}")
    MyClass.foo()
}

对象表达式和对象声明之间有一个重要的语义差别：
    对象表达式是在使用他们的地方立即执行的

    对象声明是在第一次被访问到时延迟初始化的
    伴生对象的初始化是在相应的类被加载（解析）时，与 Java 静态初始化器的语义相匹配

————————————
13.Kotlin 委托模式（代理模式）  by
类委托 

类的委托即一个类中定义的方法实际是调用另一个类的对象的方法来实现的。
这样委托的使用，也能减少很多重复的样板代码。

// 创建约束接口
interface Base {   
    //被代理的方法
    fun print()
}

// 实现此接口的被委托的类
class BaseImpl(val x: Int) : Base {
    override fun print() { print(x) }
}

// 通过关键字 by 建立委托类
class Derived(b: Base) : Base by b

fun main(args: Array<String>) {
    val b = BaseImpl(10)
    Derived(b).print() // 输出 10
}
属性委托

委托属性的语法如下：
val/var <属性名>: <类型> by <表达式委托代理类>
被代理的逻辑就是这个属性的get/set方法。
get/set会委托给被委托对象的setValue/getValue方法，
因此被委托类需要提供setValue/getValue这两个方法。
如果是val 属性，只需提供getValue。
如果是var 属性，则setValue/getValue都需要提供

// 定义包含属性委托的类
class Example {
    var p: String by Delegate()
}

// 委托的类
class Delegate {
    operator fun getValue(thisRef: Any?, property: KProperty<*>): String {
        return "$thisRef, 这里委托了 ${property.name} 属性"
    }

    operator fun setValue(thisRef: Any?, property: KProperty<*>, value: String) {
        println("$thisRef 的 ${property.name} 属性赋值为 $value")
    }
}
fun main(args: Array<String>) {
    val e = Example()
    println(e.p)     // 访问该属性，调用 getValue() 函数

    e.p = "Runoob"   // 调用 setValue() 函数
    println(e.p)
}


 Kotlin 标准库中声明了2个含所需 operator方法的 ReadOnlyProperty / ReadWriteProperty 接口
 被委托类 实现这两个接口其中之一就可以了
 interface ReadOnlyProperty<in R, out T> {
    operator fun getValue(thisRef: R, property: KProperty<*>): T
}

interface ReadWriteProperty<in R, T> {
    operator fun getValue(thisRef: R, property: KProperty<*>): T
    operator fun setValue(thisRef: R, property: KProperty<*>, value: T)
}

// val 属性委托实现
class Delegate1: ReadOnlyProperty<Any,String>{
    override fun getValue(thisRef: Any, property: KProperty<*>): String {
        return "通过实现ReadOnlyProperty实现，name:${property.name}"
    }
}
// var 属性委托实现
class Delegate2: ReadWriteProperty<Any,Int>{
    override fun getValue(thisRef: Any, property: KProperty<*>): Int {
        return  20
    }

    override fun setValue(thisRef: Any, property: KProperty<*>, value: Int) {
       println("委托属性为： ${property.name} 委托值为： $value")
    }

}
// 测试
class Test {
    // 属性委托
    val d1: String by Delegate1()
    var d2: Int by Delegate2()
}

Kotlin 标准库中提供了几种委托，例如：

延迟属性（lazy properties）: 其值只在首次访问时计算；
可观察属性（observable properties）: 监听器会收到有关此属性变更的通知；
把多个属性储存在一个映射（map）中，而不是每个存在单独的字段中
lazy使用：使用对象但不需要数据时，lazy很有用
 val lazyProp:String by lazy{
    println("仅仅第一次才调用")
    "test" //结果
  }
fun main(){
      println(lazyProp )
      println(lazyProp )
     
  }

by  lazy只能作为val关键字标注的属性
当熟悉用到时，才初始化 lazy{} 的内容
再次调用时，只会得到结果，不会再次执行lazy{}，初始化只有一次
