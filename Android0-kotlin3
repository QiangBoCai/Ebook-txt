0.从Java到Kotlin基础
https://hughclub.github.io/java-kotlin-guide-chinese/#/
Ubuntu 安装Android  Studio
sudo apt install snapd
sudo snap install android-studio --classic
ubunt18.04使用snap管理程序包，修改配置文件内容都在~/.config/目录下 eg 修改vmoptions

AndroidStudio 快捷键使用eclipse： file>Settings>keymap>Eclipse

1.Kotlin3
1.1  可见性修饰符Kotlin中也有4种
Kotlin分别是public（默认所有类可见）、private（当前类可见 ）、protected（当前类可见，子类可见）internal（同一模块内可见）
1.2 数据类data和单例类object常用
1.3 集合
列表List  ArrayList   LinkedList
val list = ArrayList<String>() 
list.add("Apple") 
list.add("Banana") 
list.add("Orange") 
list.add("Pear") 
list.add("Grape")
内置的listOf()函数来简化， 创建的是一个不可变的集合，该集合只能用于读取，我们无法对集合进行添加、修改或删除操作
初始化集合的写法，如下所示：
val list = listOf("Apple", "Banana", "Orange", "Pear", "Grape")

mutableListOf()函数创建一个可变的集合
 val list = mutableListOf("Apple", "Banana", "Orange", "Pear", "Grape") 
    list.add("Watermelon")

Set   HashSet
 Set集合中是不可以存放重复元素的，如果存放了多个相同的元素，只会保留其中一份
setOf()和mutableSetOf()函数

Map   HashMap
传统的Map用法是先创建一个HashMap的实例，然后将一个个键值对数
据添加到Map中。比如这里我们给每种水果设置一个对应的编号，就可以这样写：
val map = HashMap<String, Int>() 
map.put("Apple", 1) 
map.put("Banana", 2) 
map.put("Orange", 3) 
map.put("Pear", 4) 
map.put("Grape", 5)
kotlin提供了一对mapOf()和
mutableMapOf()函数来继续简化Map的用法。在mapOf()函数中，我们可以直接传入初始化
的键值对组合来完成对Map集合的创建：
val map = mapOf("Apple" to 1, "Banana" to 2, "Orange" to 3, "Pear" to 4, "Grape" to 5) 




1.4 Lambda表达式
Lambda 表达式的语法结构：
{参数名1: 参数类型, 参数名2: 参数类型 -> 函数体}
    val list = listOf("Apple", "Banana", "Orange", "Pear", "Grape", "Watermelon")
//    val lambda = { fruit: String -> fruit.length }//Lambda完整写法
//    val maxLengthFruit = list.maxBy(lambda)
//    val maxLengthFruit = list.maxBy()//省略lambda变量写法
//    当Lambda 参数是函数的最后一个参数时，可以将Lambda 表达式移到函数括号的外面
//    val maxLengthFruit = list.maxBy(){ fruit: String -> fruit.length }
//    Lambda 参数是函数的唯一一个参数的话，还可以将函数的括号省略
//    val maxLengthFruit = list.maxBy { fruit: String -> fruit.length }
//    Lambda 表达式中的参数列表其实在大多数情况下不必声明参数类型
//    val maxLengthFruit = list.maxBy { fruit -> fruit.length }
//    当Lambda 表达式的参数列表中只有一个参数时，也不必声明参数名，而是可以使用it关键字来代替
    val maxLengthFruit = list.maxBy { it.length } //Lambda表达式简写
    println("max length fruit is ${maxLengthFruit}")

1.5 集合的函数式API

maxBy 函数 按Lambda表达规则 取集合中字符最长的返回
val list = listOf("Apple", "Banana", "Orange", "Pear", "Grape", "Watermelon") 
val maxLengthFruit = list.maxBy { it.length } 
println("max length fruit is " + maxLengthFruit)

map函数 ，它用于将集合中的每个元素都映射成一个另外的
值，映射的规则在Lambda 表达式中指定，最终生成一个新的集合
val list = listOf("Apple", "Banana", "Orange", "Pear", "Grape", "Watermelon") 
val newList = list.map { it.toUpperCase() }
filter函数
是用来过滤集合中的数据的，它可以单独使用，也可以配合刚才的map函数一起使用
val list = listOf("Apple", "Banana", "Orange", "Pear", "Grape", "Watermelon") 
    val newList = list.filter { it.length <= 5 } 
.map { it.toUpperCase() }

any函数用于判断集合中是否至少存在一个元素满足指定条件 
all函数用于判断集合中是否所有元素都满足指定条件
    val list = listOf("Apple", "Banana", "Orange", "Pear", "Grape", "Watermelon")
    val anyResult = list.any { it.length <= 5 }
    val allResult = list.all { it.length <= 5 }
    println("anyResult is " + anyResult + ", allResult is " + allResult)//anyResult is true, allResult is false

 1.6 Java 函数式API的简化使用 
限定于从Kotlin中调用Java 方法，并且仅限于单抽象方法接口也必须是用Java 语言定义的
 Kotlin代码中调用了一个Java 方法，并且该方法接收一个Java 单抽象方法接口参数，就可以使用函数式API
Java 单抽象方法接口指的是接口中只有一个待实现方法，如果接口中有多个待实现方法，则无法使用函数式API
Kotlin中有专门的高阶函数来实现更加强大的自定义函数式API功能，暂缓后面补上
最为常见的单抽象方法接口——Runnable接口。这个接口
中只有一个待实现的run()方法，定义如下：
public interface Runnable { 
    void run(); 
}
new Thread(new Runnable() { //java 匿名内部类写法
    @Override 
    public void run() { 
            System.out.println("Thread is running"); 
    } 
}).start(); 
Thread(object : Runnable { //kotlin 对象表达式写法
    override fun run() { 
        println("Thread is running") 
    } 
}).start()
Thread类的构造方法是符合Java 函数式API的使用条件的，下面我们就看看
如何对代码进行精简，如下所示：
Thread(Runnable { 
    println("Thread is running") 
}).start()

如果一个Java 方法的参数列表中有且仅有一个Java 单抽象方法接口参数，我们还可以将接口名进行省略，这样代码就变得更加精简了：
Thread({ 
    println("Thread is running") 
}).start() 
当Lambda 表达式是方法的最后一个参数时，可以将Lambda 表达式移到方法括号的外面。同时，如果Lambda 表达式还是
方法的唯一一个参数，还可以将方法的括号省略
Thread{ 
    println("Thread is running") 
}.start() 

Android 中有一个极为常用的点击事件接口OnClickListener
public interface OnClickListener { 
    void onClick(View v); 
} 
可以看到，这又是一个单抽象方法接口。假设现在我们拥有一个按钮button的实例，然后使用
Java 代码去注册这个按钮的点击事件，需要这么写：
button.setOnClickListener(new View.OnClickListener() { 
    @Override 
    public void onClick(View v) { 
    } 
}); 
而用Kotlin代码实现同样的功能，就可以使用函数式API的写法来对代码进行简化，结果如下：
button.setOnClickListener { 

} 


1.7 空指针检查
?.当对象不为空时正常调用相应的方法，当对象为空时则什么都不做
if (a != null) { 
    a.doSomething()
} 
这段代码使用?.操作符就可以简化成：
a?.doSomething()

?: 左边表达式的结果不为空就返回左边表达式的结果，否则就返回右边表达式的结果
val c = if (a ! = null) { 
    a 
} else { 
    b 
} 
这段代码的逻辑使用?:操作符就可以简化成：
val c = a ?: b

1.8 Kotlin标准函数API
let 函数  
obj.let({obj2 -> 
   //具体业务
})
这个函数提供了函数式API的编程接口，并将原始调用对象作为参数传递到Lambda 表达式中
示例代码如下：
为了防止变量重名，这里我将参数名改成了obj2，但实际上它们是同一个对象，这就是let函数的作用
obj.let { obj2 -> 
    // 编写具体的业务逻辑 
}
每次调用study对象的方法时都要进行一次if判断
fun doStudy(study: Study?) { 
    study?.readBooks() 
    study?.doHomework() 
}
简化，只判断一次study对象
fun doStudy(study: Study?) { 
    study?.let { stu -> 
        stu.readBooks() 
        stu.doHomework() 
    } 
}
it简化
fun doStudy(study: Study?) { 
    study?.let {  
        it.readBooks() 
        it.doHomework() 
    } 
}


全局变量的值随时都有可能被其他线程所修改，即使使用if做了判空处理，仍然无法保证if语句中的study变量没有空指针风险;?.没有这个风险
var study:Study?=null
fun doStudy(){
    if(study !=null){
        study.readBooks() //编译报错
         study!!.readBooks() // !!强制主观认定非空，编译不报错，有隐患
    }
}
 

 1.9 字符串内嵌表达式

 Kotlin允许我们在字符串里嵌入${}这种语法结构的表达式;
 当表达式中仅有一个变量的时候，还可以将两边的大括号省略;
    val brand = "Samsung"
    val price = 1299.99
    println("Cellphone(brand=" + brand + ", price=" + price + ")")
//简写
    println("Cellphone(brand=$brand, price=$price)")


1.10   函数的参数默认值 
fun printParams(num: Int, str: String = "hello") {
    println("num is $num , str is $str")
}
fun main() {
    printParams(123)//num is 123 , str is hello
}
类型不匹配错误提示
fun printParams(num: Int=10, str: String) {
    println("num is $num , str is $str")
}
fun main() {
    printParams("Hello")
}
键值对参数赋值
fun main() {
    printParams(str = "hello")
}
函数的参数默认值这个功能可以在很大程度上替代次构造函数的作用

class Student(val sno: String, val grade: Int, name: String, age: Int) : 
Person(name, age) { 
    constructor(name: String, age: Int) : this("", 0, name, age) { 
    } 
    constructor() : this("", 0) { 
    } 
} 
上述代码中有一个主构造函数和两个次构造函数，次构造函数在这里的作用是提供了使用更少参数来对Student类进行实例化的方式
无参的次构造函数会调用两个参数的次构造函数，并将这两个参数赋值成初始值。两个参数的次构造函数会调用4个参数的主构造函数，并将缺失的
两个参数也赋值成初始值
简写
我们完全可以通过只编写一个主构造函数，然后给参
数设定默认值的方式来实现，代码如下所示：
class Student(val sno: String = "", val grade: Int = 0, name: String = "", age: Int = 0) : Person(name, age) { 
} 
在给主构造函数的每个参数都设定了默认值之后，我们就可以使用任何传参组合的方式来对
Student类进行实例化，当然也包含了刚才两种次构造函数的使用场景。
由此可见，给函数设定参数默认值这个小技巧的作用还是极大的


1.11 Kotlin3- 标准函数API和静态方法
Kotlin的标准函数指的是Standard.kt 文件中定义的函数，任何Kotlin代码都可以自由地调用所有的标准函数

let函数，它的主要作用就是配合?.操作符来进行辅助判空处理
with函数 
接收两个参数：第一个参数可以是一个任意类型的对象，第二个参数是一个Lambda 表达式

with函数会在Lambda 表达式中提供第一个参数对象
的上下文，并使用Lambda 表达式中的最后一行代码作为返回值返回。示例代码如下：
val result = with(obj) {//Lambda表达式移到括号外 
    // 这里是obj的上下文 
    "value" // with函数的返回值 
} 
 它可以在连续调用同一个对象的多个方法时让代码变得更加精简
val list = listOf("Apple", "Banana", "Orange", "Pear", "Grape") 
val builder = StringBuilder() 
builder.append("Start eating fruits.\n") 
for (fruit in list) { 
    builder.append(fruit).append("\n") 
} 
builder.append("Ate all fruits.") 
val result = builder.toString() 
println(result) 

with函数简写
val list = listOf("Apple", "Banana", "Orange", "Pear", "Grape") 
val result = with(StringBuilder()) { 
    append("Start eating fruits.\n") 
    for (fruit in list) { 
        append(fruit).append("\n") 
    } 
    append("Ate all fruits.") 
    toString() //最后一行with函数返回值
} 
println(result) 

//给with函数的第一个参数传入了一个StringBuilder对象，那么接下来整个Lambda 表达式的上下文就会是这个StringBuilder对象。
在Lambda 表达式中就不用再像刚才那样调用builder.append()和builder.toString()方法了，
可以直接调用append()和toString()方法


run函数的用法和使用场景其实和with函数是非常类似
val result = obj.run { 
    // 这里是obj的上下文 
    "value" // run函数的返回值 
} 
 val list = listOf("Apple", "Banana", "Orange", "Pear", "Grape") 
val result = StringBuilder().run { 
    append("Start eating fruits.\n") 
    for (fruit in list) {  
        append(fruit).append("\n") 
    } 
    append("Ate all fruits.") 
    toString() 
} 
println(result)

apply函数和run函数也是极其类似的，都要在某个对象上调用，并且只接收一个Lambda 参数，
也会在Lambda 表达式中提供调用对象的上下文，但是apply函数无法指定返回值，而是会自动返回调用对象本身

val result = obj.apply { 
     // 这里是obj的上下文 
} 
// result == obj 

val list = listOf("Apple", "Banana", "Orange", "Pear", "Grape") 
val result = StringBuilder().apply { 
    append("Start eating fruits.\n") 
    for (fruit in list) { 
        append(fruit).append("\n") 
    } 
    append("Ate all fruits.") 
} 
println(result.toString())//result==StringBuilder所以需要toString方法输出


定义静态方法

某些编程语言里面又叫作类方法，指的就是那种不需要创建实例就能调用的方法


在Java 中定义一个静态方法非常简单，只需要在方法上声明一个static关键字就可以了 
public class Util { 
     public static void doAction() { 
        System.out.println("do action"); 
    } 
 } 
 Kotlin却极度弱化了静态方法这个概念，像工具类这种功能，在Kotlin中就非常推荐使用单例类的方式来实现
object Util { //单例类
     fun doAction() { 
        println("do action") 
    } 
 } 
虽然这里的doAction()方法并不是静态方法，但是我们仍然可以使用Util.doAction()的方式来调用

如果我们只是希望让类中的某一个方法变成静态方法的调用方式，这个时候就可以使用companion object 伴生类
class Util { //普通类
     fun doAction1() { 
        println("do action1") 
    } 
     companion object { 
         fun doAction2() { 
            println("do action2") 
        } 
     } 
 }
 可以在Kotlin中使用Util.doAction2()的方式来调用，但是Java 中不能这样类名的形式直接调用
 单例类和companion object都只是在语法的形式上模仿了静态方法的调用方式，实际上它们都不是真正的静态方法

定义真正的静态方法， Kotlin仍然提供了两种实现方式：注解和顶层方法


 给单例类或companion object中的方法加上@JvmStatic注解， Kotlin编译器就会将这些方法编译成真正的静态方法
 且 @JvmStatic注解只能加在单例类或companion object中的方法上
 class Util { //普通类
     fun doAction1() { 
        println("do action1") 
    } 
    @JvmStatic
     companion object { 
         fun doAction2() { 
            println("do action2") 
        } 
     } 
 }
 现在不管是在Kotlin中还是在Java中，都可以使用Util.doAction2()的写法来调用了

 顶层方法
 顶层方法指的是那些没有定义在任何类中的方法，比如main()方法
 Kotlin编译器会将所有的顶层方法全部编译成静态方法，因此只要你定义了一个顶层方法，那么它就一定是静态方法

Helper .kt
 fun doSomething() { 
    println("do something") 
}
如果是在Kotlin代码中调用的话，那就很简单了，所有的顶层方法都可以在任何位置被直接调
用，不用管包名路径，也不用创建实例，直接键入doSomething()即可

如果是在Java 代码中调用，你会发现是找不到doSomething()这个方法的，因为Java 中没有顶层方法这个概念，所有的方法必须定义在类中。
 刚才创建的Kotlin文件名叫作Helper .kt，于是Kotlin编译器会自动创建一个叫作HelperKt 的Java 类，doSomething()方法就是以静态方法的形式定义在HelperKt 类里面的，
在Java 中使用HelperKt.doSomething()的写法来调用就可以了
