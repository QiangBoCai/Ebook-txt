Android
目录
0.Kotlin  110

1.Activity +60 》170
2.UI  +80》250

3.Fragment  + 40》290
4.Broadcast +40》330

5.数据存储 文件 SharedPreferences SQLite    +50》380
6.跨程序共享数据ContentProvider  +40》420

7.Media( Camera,Picture,Notification,Sound) +50》470
8.Service  +40》510

9.Network (WebView,JSON,XML,Retrofit )  +50》560
https://blog.csdn.net/hshuaijun55/article/details/103109630
10.UI+ Material Design  +70》630

11.UI+Jetpack +50》680
12.高级技巧 +30》710

13. MVVM APP开发 +70》780
14.SDK开发 +30》810
------------------------------------
Activity 
1.创建Activity，菜单，Toast，启动/销毁Activity，Activity间传递数据Intent,Bundle
使用android:label指定Activity中标题栏的内容

配置主Activity
任何一个Activity都是需要在AndroidManifest.xml 中注册
<activity>标签的内部加入<intent-filter>标签，并在这个标签里添加
<intent-filter> 
<action android:name="android.intent.action.MAIN" /> 
<category android:name="android.intent.category.LAUNCHER" /> 
</intent-filter> 

override fun onCreate(savedInstanceState: Bundle?) { 
    super.onCreate(savedInstanceState) 
    setContentView(R.layout.first_layout) 
    val button1: Button = findViewById(R.id.button1) //每个控件都要findViewById很麻烦
    button1.setOnClickListener { 
   Toast.makeText(this, "You clicked Button 1", Toast.LENGTH_SHORT).show() 
    }
} 
 
 简化findViewById写法
 使用Kotlin编写的Android 项目在app/build.gradle 文件的头部默认引入了一个kotlin-android-extensions 插件，
 这个插件会根据布局文件中定义的控件id （android:id="@+id/button1"）自动生成一个具有相同名称的变量，
 我们可以在Activity里直接使用这个变量，而不用再调用findViewById()方法了
override fun onCreate(savedInstanceState: Bundle?) { 
    super.onCreate(savedInstanceState) 
    setContentView(R.layout.first_layout) 
    button1.setOnClickListener { //直接使用button1
    Toast.makeText(this, "You clicked Button 1", Toast.LENGTH_SHORT).show() 
    } 
}


Activity中创建Toast和菜单
res/menu/main.xml
<menu xmlns:android="http://schemas.android.com/apk/res/android"> 
    <item 
        android:id="@+id/add_item" 
        android:title="Add"/> 
    <item 
        android:id="@+id/remove_item" 
        android:title="Remove"/> 
</menu>
重写方法可以使用Ctrl + O
override fun onCreateOptionsMenu(menu: Menu?): Boolean { //菜单初始化
    menuInflater.inflate(R.menu.main, menu) 
    return true  //true显示菜单，false隐藏
} 
override fun onOptionsItemSelected(item: MenuItem): Boolean { //选择菜单执行
    when (item.itemId) { 
        R.id.add_item -> Toast.makeText(this, "You clicked Add",Toast.LENGTH_SHORT).show() 
        R.id.remove_item -> Toast.makeText(this, "You clicked Remove",Toast.LENGTH_SHORT).show() 
    } 
    return true 
}



销毁一个Activity
button1.setOnClickListener { 
    finish() 
}

Intent 
Intent 是Android 程序中各组件之间进行交互的一种重要方式，它不仅可以指明当前组件想要执
行的动作，还可以在不同组件之间传递数据。Intent 一般可用于启动Activity、启动Service 以
及发送广播等场景
Intent 大致可以分为两种：显式Intent 和隐式Intent

意图”非常明显，因此我们称之为显式Intent 
Intent 有多个构造函数的重载，
其中一个是Intent(Context packageContext, Class<?> cls)
button1.setOnClickListener { 
    val intent = Intent(this, SecondActivity::class.java) // SecondActivity::class.java 相当有java里的SecondActivity.class
    startActivity(intent) 
}

隐式Intent 则含蓄了许多，它并不明确指出想要启动哪一个Activity，
而是指定了一系列更为抽象的action和category等信息，然后交由系统去分析这个Intent ，并帮我们找出合适的Activity去启动 

通过在<activity>标签下配置<intent-filter>的内容，
可以指定当前Activity能够响应的action和category
！！！！ 只有<action>和<category>中的内容同时匹配Intent 中指定的action和category时，这个Activity才能响应该Intent
<activity android:name=".SecondActivity" > 
    <intent-filter> 
        <action android:name="com.example.activitytest.ACTION_START" /> 
        <category android:name="android.intent.category.DEFAULT" /> 
    </intent-filter> 
</activity>
button1.setOnClickListener { 
    val intent = Intent("com.example.activitytest.ACTION_START") 
    startActivity(intent) 
}
//这里没有指定category因为android.intent.category.DEFAULT是一种默认的category，在调用startActivity()方法的时候会自动将这个category添加到Intent 中
每个Intent 中只能指定一个action，但能指定多个category
 <intent-filter> 
    <action android:name="com.example.activitytest.ACTION_START" /> 
    <category android:name="android.intent.category.DEFAULT" /> 
    <category android:name="com.example.activitytest.MY_CATEGORY"/> 
</intent-filter> 
    val intent = Intent("com.example.activitytest.ACTION_START") 
    intent.addCategory("com.example.activitytest.MY_CATEGORY") 
    startActivity(intent)


    Android 系统内置的Action
    webview打开网页 Intent.ACTION_VIEW      拨号 Intent.ACTION_DIAL 等
button1.setOnClickListener { 
    val intent = Intent(Intent.ACTION_VIEW) 
    intent.data = Uri.parse("https://www.baidu.com") 
    startActivity(intent) 
} 

可以在<intent-filter>标签中再配置一个<data>标签，用于更精确地指定当前Activity能够响应的数据。
<data>标签中主要可以配置以下内容。
android:scheme。用于指定数据的协议部分，如上例中的https 部分。
android:host。用于指定数据的主机名部分，如上例中的www.baidu.com 部分。
android:port。用于指定数据的端口部分，一般紧随在主机名之后。
android:path。用于指定主机名和端口之后的部分，如一段网址中跟在域名之后的内
容。
android:mimeType。用于指定可以处理的数据类型，允许使用通配符的方式进行指定。
！！！只有当<data>标签中指定的内容和Intent 中携带的Data 完全一致时，当前Activity才能够响应该Intent 。
不过，在<data>标签中一般不会指定过多的内容

button1.setOnClickListener { 
    val intent = Intent(Intent.ACTION_DIAL) 
    intent.data = Uri.parse("tel:10086")  // android:scheme 指定协议是tel
    startActivity(intent) 
}


向下一个Activity 传递数据putExtra
putExtra()方法接收两个参数，第一个参数是键，用于之后从Intent 中取值，第二个参数才是真正要传递的数据
button1.setOnClickListener { 
    val data = "Hello SecondActivity" 
    val intent = Intent(this, SecondActivity::class.java) 
    intent.putExtra("extra_data", data) 
    startActivity(intent) 
}

override fun onCreate(savedInstanceState: Bundle?) { 
    super.onCreate(savedInstanceState) 
    setContentView(R.layout.second_layout) 
    val extraData = intent.getStringExtra("extra_data") //intent实际上调用的是父类的getIntent()方法，该方法会获取用于启动SecondActivity 的Intent
    Log.d("SecondActivity", "extra data is $extraData") 
}
getStringExtra()方法并传入相应的键值，就可以得到传递的String数据
如果传递的是整型数据，则使用getIntExtra()方法；如果传递的是布尔型数据，则使用getBooleanExtra()方法，以此类推


Intent 还可以结合Bundle一起用于传递数据。
首先我们可以把需要传递的数据都保存在Bundle对象中，然后再将Bundle对象存放在Intent 里
到了目标Activity之后，先从Intent 中取出Bundle，再从Bundle中一一取出数据;




返回数据给上一个Activity
startActivityForResult()方法接收两个参数：第一个参数还是Intent ；第二个参数是请求码，用于在之后的回调中判断数据的来源，请求码只要是一个唯一值即可
SecondActivity
button2.setOnClickListener { 
    val intent = Intent() 
    intent.putExtra("data_return", "Hello FirstActivity") //仅传输数据给启动他的Activity，没有action
    setResult(RESULT_OK, intent) //setResult()方法专门用于向上一个Activity返回数据
    finish() //SecondActivity 被销毁之后会回调上一个Activity的onActivityResult()方法
}
override fun onBackPressed() { //SecondActivity 中重写onBackPressed()，用户按back返回时也传递数据
    val intent = Intent() 
    intent.putExtra("data_return", "Hello FirstActivity") 
    setResult(RESULT_OK, intent) 
    finish() 
}


setResult()方法接收两个参数：第一个参数用于向上一个Activity返回处理结果，一般只使用RESULT_OK或RESULT_CANCELED这两个值；
第二个参数则把带有数据的Intent 传递回去

FirstActivity
button1.setOnClickListener { 
    val intent = Intent(this, SecondActivity::class.java) 
    startActivityForResult(intent, 1) //请求码只要是一个唯一值即可，这里填了1
}
override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) { 
    super.onActivityResult(requestCode, resultCode, data) //请求码，结果码，Intent 数据
    when (requestCode) { 
            1 -> if (resultCode == RESULT_OK) { 
                val returnedData = data?.getStringExtra("data_return") 
                Log.d("FirstActivity", "returned data is $returnedData") 
            } 
    } 
}




～～～～～～～～～～～～
2.Activity生命周期
返回栈 ：后进先出
Activity是可以层叠的。我们每启动一个新的Activity，就会覆盖在原Activity之上，
然后点击Back 键或者调用finish()会销毁最上面的Activity，下面的一个Activity就会重新显示出来
adb shell "dumpsys activity|find mFocus"  
Activity 4中状态
    运行状态：当一个Activity位于返回栈的栈顶时
    暂停状态
            当一个Activity不再处于栈顶位置，但仍然可见时,这是因为并不是每一个Activity都会占满整个屏幕，
            比如对话框形式的Activity只会占用屏幕中间的部分区域。处于暂停状态的Activity仍然是完全存活着的,对用户可见
    停止状态
            当一个Activity不再处于栈顶位置，并且完全不可见的时候，就进入了停止状态。
            系统仍然会为这种Activity保存相应的状态和成员变量，但是这并不是完全可靠的，当其他地方需要内存时，处于停止状态的Activity有可能会被系统回收
    销毁状态
            一个Activity从返回栈中移除后就变成了销毁状态。系统最倾向于回收处于这种状态的Activity，以保证手机的内存充足。


Activity 的生存期
Activity类中定义了7个回调方法，覆盖了Activity生命周期的每一个环节
onCreate()
        在Activity第一次被创建的时候调用。你应该在这个方法中完成Activity的初始化操作，比如加载布局、绑定事件等。
onStart()   这个方法在Activity由不可见变为可见的时候调用。
onResume()   这个方法在Activity准备好和用户进行交互的时候调用。此时的Activity一定位于返回栈的栈顶，并且处于运行状态。

onPause()  这个方法在系统准备去启动或者恢复另一个Activity的时候调用。
                        我们通常会在这个方法中将一些消耗CPU的资源释放掉，以及保存一些关键数据，但这个方法的执行速度一定要快，不然会影响到新的栈顶Activity的使用。
onStop()  这个方法在Activity完全不可见的时候调用。
                    它和onPause()方法的主要区别在于，如果启动的新Activity是一个对话框式的Activity，那么onPause()方法会得到执行，而onStop()方法并不会执行。
onDestroy() 这个方法在Activity被销毁之前调用，之后Activity的状态将变为销毁状态。
onRestart()  这个方法在Activity由停止状态变为运行状态之前调用，也就是Activity被重新启动了
以上7个方法中除了onRestart()方法，其他都是两两相对的


 用户在Activity A 的基础上启动了Activity B ，Activity A 就进入了停止状态，这个时候由于系统内存不足，将Activity A 回收掉了，
 然后用户按下Back 键返回Activity A ， 还是会正常显示Activity A 的，只不过这时并不会执行onRestart()方法，而是会执行Activity A 的onCreate()方法
onCreate如何获取被销毁前的数据？
 onSaveInstanceState()方法会携带一个Bundle类型的参数，Bundle提供了一系列的方法用于保存数据，
 比如可以使用putString()方法保存字符串，使用putInt()方法保存整型数据，以此类推。
 每个保存方法需要传入两个参数，第一个参数是键，用于后面从Bundle中取值，第二个参数是真正要保存的内容。
在MainActivity 中添加如下代码就可以将临时数据进行保存了：
override fun onSaveInstanceState(outState: Bundle) { //onSaveInstanceState方法保存临时数据
    super.onSaveInstanceState(outState) 
    val tempData = "Something you just typed" 
    outState.putString("data_key", tempData) 
} 

override fun onCreate(savedInstanceState: Bundle?) { 
    super.onCreate(savedInstanceState) 
    Log.d(tag, "onCreate") 
    setContentView(R.layout.activity_main) 
    val tempData = savedInstanceState?.getString("data_key") //onCreate方法中恢复数据
     Log.d(tag, "tempData is $tempData") 
} 

注意：当手机的屏幕发生旋转的时候，Activity也会经历一个重新创建的过程

~~~~~~~~~~~~
4.Activity 启动模式
<activity>标签指定android:launchMode属性来选择启动模式
standard 默认  对于使用standar d模式的Activity ，系统不会在乎这个Activity 是否已经在返回栈中存在，每次启动都会创建一个该Activity 的新实例
    //FirstActivity
    button1.setOnClickListener { 
        val intent = Intent(this, FirstActivity::class.java) 
        startActivity(intent) 
    } 
每点击一次按钮，就会创建出一个新的FirstActivity 实例。点击三次会存在3个FirstActivity 的实例，需要连按3次Back 键才能退出程序

singleTop   在启动Activity时如果发现返回栈的栈顶已经是该Activity，则认为可以直接使用它，不会再创建新的Activity实例
                可以很好地解决重复创建栈顶Activity的问题
<activity 
    android:name=".FirstActivity" 
    android:launchMode="singleTop" 
    android:label="This is FirstActivity">
</activity >

singleTask  每个应用程序都会有自己的返回栈 , 某个Activity在整个应用程序的上下文中只存在一个实例

singleInstanc    实现其他程序和我们的程序可以共享这个Activity 的实例
会有一个单独的返回栈来管理这个Activity ，不管是哪个应用程序来访问这个Activity ，都共用同一个返回栈
~~~~~~~~~~~~
5.Activity 最佳实践
知晓当前是在哪一个Activity
open class BaseActivity : AppCompatActivity() { 
    override fun onCreate(savedInstanceState: Bundle?) { 
        super.onCreate(savedInstanceState) 
        Log.d("BaseActivity", javaClass.simpleName) 
    } 
 
}
让BaseActivity成为 项目中所有Activity 的父类，不需要BaseActivity在AndroidManifest.xml 中注册
Kotlin中的javaClass表示获取当前实例的Class 对象，相当于在Java 中调用getClass()方法；
而Kotlin中的BaseActivity::class.java表示获取BaseA ctivity 类的Class 对象，相当于在Java 中调用BaseActivity.class

随时随地退出程序
只需要用一个专门的集合对所有的Activity 进行管理就可以了

object ActivityCollector { //单例
 
    private val activities = ArrayList<Activity>() 
 
    fun addActivity(activity: Activity) { 
        activities.add(activity) 
    } 
 
    fun removeActivity(activity: Activity) { 
        activities.remove(activity) 
    } 
 
    fun finishAll() { 
        for (activity in activities) { 
            if (!activity.isFinishing) { 
                activity.finish() 
            } 
        } 
        activities.clear() 
    } 
} 

open class BaseActivity : AppCompatActivity() { 
 
    override fun onCreate(savedInstanceState: Bundle?) { 
        super.onCreate(savedInstanceState) 
        Log.d("BaseActivity", javaClass.simpleName) 
        ActivityCollector.addActivity(this) 
    } 
 
    override fun onDestroy() { 
        super.onDestroy() 
        ActivityCollector.removeActivity(this) 
    } 
}

button3.setOnClickListener { 
            ActivityCollector.finishAll() 
            android.os.Process.killProcess(android.os.Process.myPid()) //杀掉当前进程

}

启动Activity 的最佳写法
//调用Actvity 内的方法启动自己
class SecondActivity : BaseActivity() { 
    companion object { //类似java 的静态方法
        fun actionStart(context: Context, data1: String, data2: String) { 
            val intent = Intent(context, SecondActivity::class.java) 
            intent.putExtra("param1", data1) 
            intent.putExtra("param2", data2) 
            context.startActivity(intent) 
        } 
    } 
}

SecondActivity.actionStart(this, "data1", "data2")


简化
这里每传递一个参数就要调用一次intent.putExtra()方法，如果要传递10 个参数，那就得
调用10 次。对于这种情况，我们就可以使用标准函数来对代码进行精简，如下所示：
class SecondActivity : BaseActivity() { 
    companion object { //类似java 的静态方法
        fun actionStart(context: Context, data1: String, data2: String) { 
            val intent = Intent(context, SecondActivity::class.java).apply { 
            putExtra("param1", "data1")  //这里intent对象是apply函数的 上下文，可以省略
            putExtra("param2", "data2") 
            context.startActivity(intent) 
        } 
    } 
}
可以看到，由于Lambda 表达式中的上下文就是Intent 对象，所以我们不再需要调用
intent.putExtra()方法，而是直接调用putExtra()方法就可以了。传递的参数越多，这种写法的优势也就越明显。


~~~~~~~~~~~~
 
